---
import Base from "../layouts/base.astro";
import { getCollection } from "astro:content";
import Section from "../components/about/SectionSelector.astro";
const entries = await getCollection("About");
const sections = await Promise.all(
  entries
    .sort((a, b) => a.data.order - b.data.order)
    .map(async ({ slug, render }) => {
      const rendered = await render();
      console.log(slug);
      return { slug, ...rendered };
    })
);
---

<Base>
  {sections.map((s, i) => <Section {...s} index={i} />)}
</Base>

<style is:global>
  @import "open-props/media";
  main {
    display: grid;
    max-inline-size: var(--size-lg);
    margin-inline: auto;
  }
  #flaws {
    background-color: curtains;
  }
  #solution {
    background-color: var(--sun);
    p,
    strong,
    a {
      color: var(--curtains);
      font-weight: var(--font-weight-7);
    }
  }
  #call-to-action {
    background-color: var(--sun);
  }
  @media (--md-n-above) {
    main {
      display: grid;
      grid-template-columns: repeat(6, 1fr);
    }
    #opening {
      grid-column: span 6;
    }

    #background {
      grid-column: span 3;
      margin-inline: var(--size-9);
    }

    #context {
      grid-column: span 3;
      margin-block-start: 100px;
    }

    #flaws {
      background-color: var(--fire);
      grid-column: span 4;
      margin-block-start: -100px;
    }

    #conflict {
      grid-column: span 2;
      align-items: flex-start;
      justify-content: flex-end;
      display: flex;
      margin-inline-start: var(--size-5);
      margin-block-end: 25%;
      flex-direction: column;
    }

    #problem {
      grid-column: span 6;
    }

    #solution {
      grid-column: span 6;
      strong {
        align-self: flex-start;
        font-size: var(--size-7);
      }
      p {
        font-size: var(--size-5);
      }
    }

    #call-to-action {
      grid-column: span 6;
    }
  }
</style>
