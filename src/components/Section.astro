---
interface Props {
  hasIntro?: boolean;
  id?: string;
  elementType?: "hgroup" | "section";
  backgroundColor?: string;
  foregroundColor?: string;
}
const {
  elementType,
  id,
  hasIntro,
  backgroundColor = "curtains",
  foregroundColor = "white",
} = Astro.props;
const Element = elementType || "section";
---

<Element
  style={`--backgroundColor: var(--${backgroundColor}); --foregroundColor: var(--${foregroundColor});`}
  {id}
  class:list={[hasIntro && "has-intro", "is-container"]}
>
  <slot name="top" />
  <slot />
  <slot name="bottom" />
</Element>

<style define:vars={{ backgroundColor }}>
  .is-container {
    background-color: var(--backgroundColor);
    :global(a) {
      color: var(--sun);
    }
  }
  .is-container > :global(*) {
    max-inline-size: var(--size-lg);
    margin-inline: auto;
    padding-inline: var(--size-7);
  }

  .has-intro {
    > :global(p:first-of-type),
    > :global(p:nth-of-type(2)) {
      color: var(--foregroundColor);
      text-align: center;
      line-height: var(--font-lineheight-2);
      font-size: var(--font-size-5);
      font-weight: var(--font-weight-9);
    }
    > :global(p:last-of-type::after) {
      display: block;
      content: "..";
      line-height: 0.5;
      font-size: var(--font-size-8);
      letter-spacing: var(--font-letterspacing-4);
    }

    > :global(p:last-of-type) {
      padding-block: var(--size-9);
    }
  }
</style>
